let -> let
type -> type
id -> sometype
atrib -> :=
array -> array
of -> of
id -> string
var -> var
id -> array1
colon -> :
id -> sometype
atrib -> :=
id -> sometype
lbra -> [
int -> 20
rbra -> ]
of -> of
int -> 1
in -> in
id -> array1
let -> let
function -> function
id -> fun1
lpar -> (
id -> a
colon -> :
id -> string
comma -> ,
id -> b
colon -> :
id -> int
rpar -> )
colon -> :
id -> int
eq -> =
id -> b
plus -> +
int -> 4
function -> function
id -> fun2
lpar -> (
id -> c
colon -> :
id -> int
rpar -> )
colon -> :
id -> int
eq -> =
id -> c
plus -> +
int -> 2
in -> in
for -> for
id -> i
atrib -> :=
int -> 0
to -> to
int -> 22
do -> do
id -> i
atrib -> :=
id -> i
plus -> +
int -> 1
if -> if
id -> i
eq -> =
int -> 5
then -> then
id -> fun1
lpar -> (
string -> ""
comma -> ,
id -> i
rpar -> )
else -> else
id -> fun2
lpar -> (
string -> ""
comma -> ,
id -> i0
rpar -> )
let -> let
function -> function
id -> mult
lpar -> (
id -> a
colon -> :
id -> int
comma -> ,
id -> b
colon -> :
id -> int
rpar -> )
colon -> :
id -> int
eq -> =
id -> a
mult -> *
id -> b
var -> var
id -> res
colon -> :
id -> int
atrib -> :=
int -> 0
in -> in
id -> resultado
atrib -> :=
id -> mult
lpar -> (
int -> 4
comma -> ,
int -> 10
rpar -> )
let -> let
type -> type
id -> a
eq -> =
id -> int
var -> var
id -> b
atrib -> :=
array -> array
of -> of
id -> a
in -> in
var -> var
id -> c
atrib -> :=
int -> 1
end -> end
end -> end
end -> end
end -> end
