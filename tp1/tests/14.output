let -> let
type -> type
id -> sometype
atrib -> :=
array -> array
of -> of
id -> string
var -> var
id -> array1
colon -> :
id -> sometype
atrib -> :=
id -> sometype
lbra -> [
int -> 20
rbra -> ]
of -> of
int -> 1
in -> in
id -> array1
let -> let
function -> function
id -> fun1
lpar -> (
id -> a
colon -> :
id -> string
comma -> ,
id -> b
colon -> :
id -> int
rpar -> )
colon -> :
id -> int
eq -> =
id -> b
plus -> +
int -> 4
function -> function
id -> fun2
lpar -> (
id -> c
colon -> :
id -> int
rpar -> )
colon -> :
id -> int
eq -> =
id -> c
plus -> +
int -> 2
in -> in
for -> for
id -> i
atrib -> :=
int -> 0
to -> to
int -> 22
do -> do
id -> i
atrib -> :=
id -> i
plus -> +
int -> 1
if -> if
id -> i
eq -> =
int -> 5
then -> then
id -> fun1
lpar -> (
string -> ""
comma -> ,
id -> i
rpar -> )
else -> else
id -> fun2
lpar -> (
string -> ""
comma -> ,
id -> i0
rpar -> )
let -> let
function -> function
id -> mult
lpar -> (
id -> a
colon -> :
id -> int
comma -> ,
id -> b
colon -> :
id -> int
rpar -> )
colon -> :
id -> int
eq -> =
id -> a
mult -> *
id -> b
var -> var
id -> res
colon -> :
id -> int
atrib -> :=
int -> 0
in -> in
id -> resultado
atrib -> :=
id -> mult
lpar -> (
int -> 4
comma -> ,
int -> 10
rpar -> )
let -> let
type -> type
id -> a
eq -> =
id -> int
var -> var
id -> b
atrib -> :=
array -> array
of -> of
id -> a
in -> in
var -> var
id -> c
atrib -> :=
int -> 1
let -> let
function -> function
id -> f
lpar -> (
id -> x
colon -> :
id -> string
rpar -> )
colon -> :
id -> string
eq -> =
string -> "aaaaa"
function -> function
id -> f
lpar -> (
id -> x
colon -> :
id -> string
rpar -> )
colon -> :
id -> string
eq -> =
string -> "aaaaa"
function -> function
id -> f
lpar -> (
id -> x
colon -> :
id -> string
rpar -> )
colon -> :
id -> string
eq -> =
string -> "aaaaa"
in -> in
let -> let
var -> var
id -> a
atrib -> :=
lbra -> [
rbra -> ]
in -> in
int -> 0
let -> let
function -> function
id -> g
lpar -> (
id -> a
colon -> :
id -> int
comma -> ,
id -> b
colon -> :
id -> string
rpar -> )
colon -> :
id -> int
eq -> =
id -> a
in -> in
id -> g
lpar -> (
int -> 3
comma -> ,
string -> "one"
comma -> ,
int -> 5
rpar -> )
let -> let
type -> type
id -> tipo1
eq -> =
lcurl -> {
id -> id
colon -> :
id -> int
comma -> ,
id -> nome
colon -> :
id -> string
comma -> ,
id -> idade
colon -> :
id -> int
rcurl -> }
type -> type
id -> tipo2
eq -> =
array -> array
of -> of
id -> string
var -> var
id -> a
atrib -> :=
id -> tipo2
lbra -> [
int -> 10
rbra -> ]
of -> of
int -> 0
var -> var
id -> b
atrib -> :=
id -> tipo2
lbra -> [
int -> 5
rbra -> ]
of -> of
id -> tipo1
lcurl -> {
id -> id
eq -> =
int -> 4
comma -> ,
id -> nome
eq -> =
string -> "fran"
comma -> ,
id -> idade
eq -> =
int -> 50
rcurl -> }
var -> var
id -> c
colon -> :
id -> tipo2
atrib -> :=
id -> tipo2
lbra -> [
int -> 100
rbra -> ]
of -> of
string -> ""
var -> var
id -> d
atrib -> :=
id -> tipo1
lcurl -> {
id -> id
eq -> =
int -> 1
comma -> ,
id -> nome
eq -> =
string -> "zÃ©"
comma -> ,
id -> idade
eq -> =
int -> 20
rcurl -> }
var -> var
id -> e
atrib -> :=
id -> tipo2
lcurl -> {
id -> id
eq -> =
int -> 2
comma -> ,
id -> nome
eq -> =
string -> "jÃ£o"
comma -> ,
id -> idade
eq -> =
int -> 30
rcurl -> }
in -> in
id -> d
lbra -> [
int -> 2
rbra -> ]
dot -> .
id -> nome
atrib -> :=
string -> "maria"
semic -> ;
id -> d
lbra -> [
int -> 0
rbra -> ]
dot -> .
id -> age
atrib -> :=
int -> 40
semic -> ;
id -> a
lbra -> [
int -> 5
rbra -> ]
atrib -> :=
int -> 114
semic -> ;
id -> b
lbra -> [
int -> 4
rbra -> ]
atrib -> :=
int -> 6
semic -> ;
id -> c
lbra -> [
int -> 8
rbra -> ]
atrib -> :=
string -> "aladim"
semic -> ;
let -> let
function -> function
id -> f
lpar -> (
id -> x
colon -> :
id -> string
comma -> ,
id -> y
colon -> :
id -> string
rpar -> )
colon -> :
id -> string
eq -> =
id -> y
in -> in
id -> f
lpar -> (
string -> "string"
comma -> ,
string -> "\\com barra\\"
rpar -> )
end -> end
end -> end
end -> end
end -> end
end -> end
end -> end
end -> end
end -> end
end -> end
